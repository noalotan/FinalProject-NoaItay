pipeline {
    agent any
    
    environment {
        DOMAIN = 'itay-noa.online'
    }

    stages {
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([aws(credentialsId: 'aws credentials')]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }

        stage('Set Subdomains') {
            steps {
                script {
                    // Define subdomains as a list in Groovy
                    def subdomains = ['statuspage', 'grafana']

                    // Retrieve Load Balancer DNS
                    def ingressName = 'alb-ingress-rules'  // Replace with your actual Ingress name
                    def namespace = 'status-page'  // Replace with your actual namespace
                    
                    loadBalancerDNS = sh(script: "kubectl get ingress ${ingressName} -n ${namespace} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'", returnStdout: true).trim()
                    echo "Load Balancer DNS: ${loadBalancerDNS}"

                    // Update DNS records for each subdomain
                    withCredentials([usernamePassword(credentialsId: 'godaddy-api-credentials', usernameVariable: 'API_KEY', passwordVariable: 'API_SECRET')]) {
                        subdomains.each { subdomain ->
                            def url = "https://api.godaddy.com/v1/domains/${DOMAIN}/records/A/${subdomain}"

                            def payload = subdomain == 'statuspage' ?
                                "[{\"data\": \"${loadBalancerDNS}\", \"ttl\": 600}]" :
                                "[{\"data\": \"${DOMAIN}\", \"ttl\": 600}]"

                            def response = sh(script: """
                                curl -X PUT "${url}" \
                                -H "Authorization: Basic \$(echo -n '\$API_KEY:\$API_SECRET' | base64)" \
                                -H "Content-Type: application/json" \
                                -d '${payload}'
                            """, returnStdout: true)

                            echo "Response for ${subdomain}.${DOMAIN}: ${response}"
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'DNS update was successful!'
        }
        failure {
            echo 'DNS update failed!'
        }
    }
}
