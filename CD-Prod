pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                // Check out the Prod branch
                script {
                    def branchName = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    echo "Current branch: ${branchName}"
                    if (branchName != 'Prod') {
                        echo "Skipping build as the branch is not Prod"
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
                checkout scm
            }
        }
        stage('Image Build') { // This stage is now after Image Test
            steps {
                script {
                    status(context: 'Image Build', state: 'PENDING')
                    try {
                        build job: 'Prod-Update-Status-Page-Image'
                        status(context: 'Image Build', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'Image Build', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }
        stage('Update Cluster Deployments') {
            steps {
                script {
                    status(context: 'Deploy YMLs', state: 'PENDING')
                    try {
                        build job: 'Update-Prod-Cluster'
                        status(context: 'Update Cluster Deployments', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'Update Cluster Deployments', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }
    }
}
