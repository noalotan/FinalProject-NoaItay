pipeline {
    agent any

    stages {
        stage('Preparation') {
            steps {
                script {
                    // Set up Python environment and install dependencies
                    sh '''
                    echo "Setting up Python environment..."
                    pip3 install flake8
                    if [ -f opt/status-page/requirements.txt ]; then pip3 install -r opt/status-page/requirements.txt; fi
                    '''

                    // Lint with flake8
                    sh '''
                    echo "Linting with flake8..."
                    /var/lib/jenkins/.local/bin/flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                    /var/lib/jenkins/.local/bin/flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
                    '''
                }
            }
        }
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws credentials']]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }
        stage('Set kubectl with the right cluster') {
            steps {
                sh 'aws eks update-kubeconfig --name cluster-noa-itay-Dev --region us-east-1'
            }
        }
        stage('Check Django Deployment Status') {
            steps {
                script {
                    def deploymentName = "django"
                    def namespace = "status-page"
                    
                    try {
                        sh(script: "kubectl rollout status deployment/${deploymentName} -n ${namespace}", returnStdout: true)
                        echo "Deployment ${deploymentName} is ready."
                    } catch (Exception e) {
                        error "Deployment ${deploymentName} is not ready: ${e.getMessage()}"
                    }
                }
            }
        }
        stage('Check NGINX Deployment Status') {
            steps {
                script {
                    def deploymentName = "nginx"
                    def namespace = "status-page"
                    
                    try {
                        sh(script: "kubectl rollout status deployment/${deploymentName} -n ${namespace}", returnStdout: true)
                        echo "Deployment ${deploymentName} is ready."
                    } catch (Exception e) {
                        error "Deployment ${deploymentName} is not ready: ${e.getMessage()}"
                    }
                }
            }
        }
        stage('Wait for Load Balancer') {
            steps {
                script {
                    def loadBalancerName = 'alb-ingress-noa-itay-dev' // Replace with your load balancer name
                    def dnsName = ''
                    def maxAttempts = 30 // Maximum number of attempts
                    def attempt = 0

                    while (attempt < maxAttempts) {
                        // Get the load balancer state
                        def lbDescription = sh(script: "aws elbv2 describe-load-balancers --names ${loadBalancerName} --query 'LoadBalancers[0]' --output json", returnStdout: true)
                        def lbState = readJSON(text: lbDescription)

                        if (lbState.State.Code == 'active') {
                            dnsName = lbState.DNSName
                            echo "Load Balancer is active. DNS: ${dnsName}"
                            break
                        } else {
                            echo "Load Balancer state is ${lbState.State}. Waiting..."
                            sleep 10 // Wait before checking again
                        }
                        attempt++
                    }

                    // Check connectivity to the DNS name
                    if (dnsName) {
                        def connectivityCheck = sh(script: "curl -Is http://${dnsName} | head -n 1", returnStdout: true).trim()
                        echo "Connectivity check result: ${connectivityCheck}"
                    } else {
                        error "Load Balancer did not become active after ${maxAttempts} attempts."
                    }
                }
            }
        }
    }
}
