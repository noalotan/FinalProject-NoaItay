pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        CLUSTER_NAME = 'cluster-noa-itay'
        SERVICE_ACCOUNT_NAME = 'aws-load-balancer-controller'
        ROLE_NAME = 'AmazonEKSLoadBalancerControllerRole'
        POLICY_NAME = 'AWSLoadBalancerControllerIAMPolicy-Itay-Noa'
        IAM_POLICY_URL = 'https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/install/iam_policy.json'
        HELM_REPO = 'https://aws.github.io/eks-charts'
    }

    stages {
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([aws(credentialsId: 'aws credentials')]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }
        stage('Download IAM Policy') {
            steps {
                script {
                    sh "curl -O ${IAM_POLICY_URL}"
                }
            }
        }

        stage('Create IAM Policy') {
            steps {
                script {
                    sh "aws iam create-policy --policy-name ${POLICY_NAME} --policy-document file://iam_policy.json"
                }
            }
        }

        stage('Create IAM Service Account') {
            steps {
                script {
                    def policyArn = sh(script: "aws iam list-policies --query \"Policies[?PolicyName=='${POLICY_NAME}'].Arn\" --output text", returnStdout: true).trim()
                    sh "eksctl create iamserviceaccount --cluster=${CLUSTER_NAME} --region=${AWS_REGION} --namespace=kube-system --name=${SERVICE_ACCOUNT_NAME} --role-name=${ROLE_NAME} --attach-policy-arn=${policyArn} --approve"
                }
            }
        }

        stage('Install AWS Load Balancer Controller') {
            steps {
                script {
                    sh "helm repo add eks ${HELM_REPO}"
                    sh "helm repo update"
                    sh "helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=${CLUSTER_NAME} --set serviceAccount.create=false --set serviceAccount.name=${SERVICE_ACCOUNT_NAME}"
                }
            }
        }

        stage('Apply Ingress Class Configuration') {
            steps {
                script {
                    sh "kubectl apply -f ingress/ingress-class.yaml"
                }
            }
        }

        stage('Apply Ingress Configuration') {
            steps {
                script {
                    sh "kubectl apply -f ingress/ingress.yaml"
                }
            }
        }
    }
    
    post {
        success {
            echo 'Deployment succeeded!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
