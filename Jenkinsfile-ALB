pipeline {
    agent any 

    environment {
        CLUSTER_NAME = 'cluster-noa-itay'
        REGION_NAME = 'us-east-1'
        POLICY_ARN = 'arn:aws:iam::992382545251:policy/AWSLoadBalancerControllerIAMPolicy'
    }

    stages {
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([aws(credentialsId: 'aws credentials')]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }
        
        stage('Update Kubeconfig') {
            steps {
                script {
                    sh """
                    aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION_NAME}
                    """
                }
            }
        }

        stage('Create IAM Service Account') {
            steps {
                script {
                    sh """
                    eksctl create iamserviceaccount \\
                      --cluster=${CLUSTER_NAME} \\
                      --region ${REGION_NAME} \\
                      --namespace=kube-system \\
                      --name=aws-load-balancer-controller \\
                      --role-name AmazonEKSLoadBalancerControllerRole \\
                      --attach-policy-arn=${POLICY_ARN} \\
                      --approve
                    """
                }
            }
        }

        stage('Install AWS Load Balancer Controller') {
            steps {
                script {
                    sh """
                    helm repo add eks https://aws.github.io/eks-charts
                    helm repo update eks
                    helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\
                      -n kube-system \\
                      --set clusterName=${CLUSTER_NAME} \\
                      --set serviceAccount.create=false \\
                      --set serviceAccount.name=aws-load-balancer-controller
                    """
                }
            }
        }

        stage('Apply Ingress Resources') {
            steps {
                script {
                    sh """
                    kubectl apply -f ingress/ingress-class.yaml
                    kubectl apply -f ingress/ingress.yaml
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
