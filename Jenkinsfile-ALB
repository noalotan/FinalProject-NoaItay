pipeline {
    agent any 

    environment {
        CLUSTER_NAME = 'cluster-noa-itay'
        REGION_NAME = 'us-east-1'
        POLICY_ARN = 'arn:aws:iam::992382545251:policy/AWSLoadBalancerControllerIAMPolicy'
    }

    stages {
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([aws(credentialsId: 'aws credentials')]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }

        stage('Update Kubeconfig') {
            steps {
                script {
                    sh """
                    aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION_NAME}
                    """
                }
            }
        }

        stage('Check IAM Service Account') {
            steps {
                script {
                    // Output the current context
                    sh "kubectl config current-context"

                    // List all service accounts in kube-system
                    sh "kubectl get serviceaccounts -n kube-system"

                    // Check if the service account exists
                    def exists = sh(script: "kubectl get serviceaccount aws-load-balancer-controller -n kube-system", returnStatus: true)
                    echo "Service account check returned: ${exists}" // Debugging line
                    if (exists != 0) {
                        echo "IAM Service Account not found. Creating..."
                        sh """
                        eksctl create iamserviceaccount \\
                          --cluster=${CLUSTER_NAME} \\
                          --region=${REGION_NAME} \\
                          --namespace=kube-system \\
                          --name=aws-load-balancer-controller \\
                          --role-name AmazonEKSLoadBalancerControllerRole-noa-itay \\
                          --attach-policy-arn=${POLICY_ARN} \\
                          --approve
                        """
                    } else {
                        echo "IAM Service Account already exists, skipping creation."
                    }
                }
            }
        }

        stage('Install or Upgrade AWS Load Balancer Controller') {
            steps {
                script {
                    def installed = sh(script: "helm list -n kube-system | grep aws-load-balancer-controller", returnStatus: true)
                    if (installed == 0) {
                        echo "Upgrading AWS Load Balancer Controller..."
                        sh """
                        helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \\
                          -n kube-system \\
                          --set clusterName=${CLUSTER_NAME} \\
                          --set serviceAccount.create=false \\
                          --set serviceAccount.name=aws-load-balancer-controller
                        """
                    } else {
                        echo "Installing AWS Load Balancer Controller..."
                        sh """
                        helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\
                          -n kube-system \\
                          --set clusterName=${CLUSTER_NAME} \\
                          --set serviceAccount.create=false \\
                          --set serviceAccount.name=aws-load-balancer-controller
                        """
                    }
                }
            }
        }

        stage('Wait for Webhook to be Ready') {
            steps {
                script {
                    echo "Waiting for AWS Load Balancer Controller webhook to be ready..."
                    
                    // Wait for the webhook service to be available
                    def ready = false
                    for (int i = 0; i < 10; i++) { // Wait for up to 10 attempts
                        ready = sh(script: "kubectl get pods -n kube-system | grep aws-load-balancer-webhook | grep Running", returnStatus: true) == 0
                        if (ready) {
                            break
                        }
                        sleep(10) // Wait for 10 seconds before checking again
                    }
                    
                    if (!ready) {
                        error "AWS Load Balancer Controller webhook is not ready after waiting."
                    } else {
                        echo "Webhook is ready."
                    }
                }
            }
        }

        stage('Apply Ingress Resources') {
            steps {
                script {
                    echo "Applying ingress resources..."
                    sh """
                    kubectl apply -f ingress/ingress-class.yaml
                    kubectl apply -f ingress/ingress.yaml
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
