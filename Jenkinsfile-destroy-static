pipeline {
    agent any

    stages {
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([aws(credentialsId: 'aws credentials')]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }
        stage('Execute Job') {
            steps {
                script {
                    def jobs = [
                        ['name': 'Architecture Apply', 'job': 'Dev-Architecture-apply'],
                        ['name': 'Image Test', 'job': 'Dev-app-syntax-test'],
                        ['name': 'Image Build', 'job': 'Dev-Update-status-page-image'],
                        ['name': 'Deploy YMLs', 'job': 'Dev-Application-deploy'],
                        ['name': 'ALB Apply', 'job': 'Dev-Alb-deploy'],
                        ['name': 'Tests', 'job': 'Dev-CI-Tests'],
                        ['name': 'ALB Destroy', 'job': 'Dev-Alb-destroy'],
                        ['name': 'Architecture Destroy', 'job': 'Dev-Architecture-destroy']
                    ]

                    for (def entry : jobs) {
                        def context = entry.name
                        githubNotify context: context, 
                                     description: "Starting ${context}", 
                                     state: 'PENDING', 
                                     credentialsId: 'aws credentials',
                                     repo: 'noalotan/FinalProject-NoaItay', 
                                     account: 'noalotan', 
                                     sha: env.GIT_COMMIT
                        try {
                            build job: entry.job
                            githubNotify context: context, 
                                         description: "${context} succeeded", 
                                         state: 'SUCCESS', 
                                         credentialsId: 'aws credentials',
                                         repo: 'noalotan/FinalProject-NoaItay', 
                                         account: 'noalotan', 
                                         sha: env.GIT_COMMIT
                        } catch (Exception e) {
                            githubNotify context: context, 
                                         description: "${context} failed", 
                                         state: 'FAILURE', 
                                         credentialsId: 'aws credentials',
                                         repo: 'noalotan/FinalProject-NoaItay', 
                                         account: 'noalotan', 
                                         sha: env.GIT_COMMIT
                            throw e
                        }
                    }
                }
            }
        }
    }
}
