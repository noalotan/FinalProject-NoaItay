pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'itayshlanger/status-page-prod'
        K8S_DEPLOYMENT = 'django'
        K8S_NAMESPACE = 'status-page'
    }

    stages {
        stage('Setup AWS Credentials') {
            steps {
                withCredentials([aws(credentialsId: 'aws credentials')]) {
                    script {
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }
        stage('Set kubectl with the right cluster') {
            steps {
                sh 'aws eks update-kubeconfig --name cluster-noa-itay-prod --region us-east-1'
                sh 'kubectl config current-context'
            }
        }
        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    // Update the deployment image with the latest tag
                    sh "kubectl set image deployment/$K8S_DEPLOYMENT django=$DOCKER_IMAGE:latest -n $K8S_NAMESPACE --record"
                    
                    // Add a timestamp annotation to force the rolling update
                    sh "kubectl annotate deployment/$K8S_DEPLOYMENT redeploy-timestamp=$(date +'%s') --overwrite -n $K8S_NAMESPACE"
                }
            }
        }
        stage('Verify Update') {
            steps {
                script {
                    // Wait for the rollout to complete and check status
                    sh "kubectl rollout status deployment/$K8S_DEPLOYMENT -n $K8S_NAMESPACE"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully with uptime!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
