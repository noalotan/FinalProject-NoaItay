pipeline {
    agent any

    environment {
        // Use GitHub PR-specific variables instead of CHANGE_*
        BRANCH_NAME = "${env.BRANCH_NAME ?: 'unknown'}"
        PR_ID = "${env.GITHUB_PR_NUMBER ?: 'none'}"
        PR_BRANCH = "${env.GITHUB_PR_SOURCE_BRANCH ?: 'none'}"
        PR_TARGET = "${env.GITHUB_PR_TARGET_BRANCH ?: 'none'}"
    }

    parameters {
        string(name: 'prBranch', defaultValue: '', description: 'The source branch of the PR')
    }

    stages {

        stage('Check PR Target') {
            when {
                expression { 
                    // Check if the PR target branch is 'Dev'
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                echo "PR Target is 'Dev'. Proceeding with the CI pipeline."
            }
        }

        stage('Image Test') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'Image Test', state: 'PENDING')
                    try {
                        build job: 'Dev-app-syntax-test', parameters: [
                            string(name: 'prBranch', value: env.PR_BRANCH)
                        ]
                        status(context: 'Image Test', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'Image Test', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('Image Build') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'Image Build', state: 'PENDING')
                    try {
                        build job: 'Dev-Update-status-page-image', parameters: [
                            string(name: 'prBranch', value: env.PR_BRANCH)
                        ]
                        status(context: 'Image Build', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'Image Build', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('Architecture Apply') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'Architecture Apply', state: 'PENDING')
                    try {
                        build job: 'Dev-Architecture-apply'
                        status(context: 'Architecture Apply', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'Architecture Apply', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('Deploy YMLs') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'Deploy YMLs', state: 'PENDING')
                    try {
                        build job: 'Dev-Application-deploy'
                        status(context: 'Deploy YMLs', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'Deploy YMLs', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('ALB Apply') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'ALB Apply', state: 'PENDING')
                    try {
                        build job: 'Dev-Alb-deploy'
                        status(context: 'ALB Apply', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'ALB Apply', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }

        stage('Tests') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'Tests', state: 'PENDING')
                    try {
                        build job: 'Dev-CI-Tests'
                        status(context: 'Tests', state: 'SUCCESS')
                    } catch (Exception e) {
                        status(context: 'Tests', state: 'FAILURE')
                        throw e
                    }
                }
            }
        }

        // Destroy stages
        stage('ALB Destroy') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'ALB Destroy', state: 'PENDING')
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            build job: 'Dev-Alb-destroy'
                            status(context: 'ALB Destroy', state: 'SUCCESS')
                        } catch (Exception e) {
                            status(context: 'ALB Destroy', state: 'FAILURE')
                            throw e
                        }
                    }
                }
            }
        }

        stage('Architecture Destroy') {
            when {
                expression { 
                    return env.PR_TARGET == 'Dev'
                }
            }
            steps {
                script {
                    status(context: 'Architecture Destroy', state: 'PENDING')
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            build job: 'Dev-Architecture-destroy'
                            status(context: 'Architecture Destroy', state: 'SUCCESS')
                        } catch (Exception e) {
                            status(context: 'Architecture Destroy', state: 'FAILURE')
                            throw e
                        }
                    }
                }
            }
        }

        stage('Pipeline Skipped') {
            when {
                expression { 
                    return env.PR_TARGET != 'Dev'
                }
            }
            steps {
                echo "PR target is not 'Dev'. Skipping the pipeline."
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished!'
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}
